/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CarModel2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2860344076378776637L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CarModel2\",\"namespace\":\"kafka.avro\",\"fields\":[{\"name\":\"make\",\"type\":\"string\"},{\"name\":\"myenum\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"Suit\",\"symbols\":[\"SPADES\",\"HEARTS\",\"DIAMONDS\",\"CLUBS\"]}]},{\"name\":\"myArray\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Child\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CarModel2> ENCODER =
      new BinaryMessageEncoder<CarModel2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CarModel2> DECODER =
      new BinaryMessageDecoder<CarModel2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CarModel2> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CarModel2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CarModel2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CarModel2>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CarModel2 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CarModel2 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CarModel2 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CarModel2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence make;
   private kafka.avro.Suit myenum;
   private java.util.List<kafka.avro.Child> myArray;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CarModel2() {}

  /**
   * All-args constructor.
   * @param make The new value for make
   * @param myenum The new value for myenum
   * @param myArray The new value for myArray
   */
  public CarModel2(java.lang.CharSequence make, kafka.avro.Suit myenum, java.util.List<kafka.avro.Child> myArray) {
    this.make = make;
    this.myenum = myenum;
    this.myArray = myArray;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return make;
    case 1: return myenum;
    case 2: return myArray;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: make = (java.lang.CharSequence)value$; break;
    case 1: myenum = (kafka.avro.Suit)value$; break;
    case 2: myArray = (java.util.List<kafka.avro.Child>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'make' field.
   * @return The value of the 'make' field.
   */
  public java.lang.CharSequence getMake() {
    return make;
  }


  /**
   * Sets the value of the 'make' field.
   * @param value the value to set.
   */
  public void setMake(java.lang.CharSequence value) {
    this.make = value;
  }

  /**
   * Gets the value of the 'myenum' field.
   * @return The value of the 'myenum' field.
   */
  public kafka.avro.Suit getMyenum() {
    return myenum;
  }


  /**
   * Sets the value of the 'myenum' field.
   * @param value the value to set.
   */
  public void setMyenum(kafka.avro.Suit value) {
    this.myenum = value;
  }

  /**
   * Gets the value of the 'myArray' field.
   * @return The value of the 'myArray' field.
   */
  public java.util.List<kafka.avro.Child> getMyArray() {
    return myArray;
  }


  /**
   * Sets the value of the 'myArray' field.
   * @param value the value to set.
   */
  public void setMyArray(java.util.List<kafka.avro.Child> value) {
    this.myArray = value;
  }

  /**
   * Creates a new CarModel2 RecordBuilder.
   * @return A new CarModel2 RecordBuilder
   */
  public static kafka.avro.CarModel2.Builder newBuilder() {
    return new kafka.avro.CarModel2.Builder();
  }

  /**
   * Creates a new CarModel2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CarModel2 RecordBuilder
   */
  public static kafka.avro.CarModel2.Builder newBuilder(kafka.avro.CarModel2.Builder other) {
    if (other == null) {
      return new kafka.avro.CarModel2.Builder();
    } else {
      return new kafka.avro.CarModel2.Builder(other);
    }
  }

  /**
   * Creates a new CarModel2 RecordBuilder by copying an existing CarModel2 instance.
   * @param other The existing instance to copy.
   * @return A new CarModel2 RecordBuilder
   */
  public static kafka.avro.CarModel2.Builder newBuilder(kafka.avro.CarModel2 other) {
    if (other == null) {
      return new kafka.avro.CarModel2.Builder();
    } else {
      return new kafka.avro.CarModel2.Builder(other);
    }
  }

  /**
   * RecordBuilder for CarModel2 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CarModel2>
    implements org.apache.avro.data.RecordBuilder<CarModel2> {

    private java.lang.CharSequence make;
    private kafka.avro.Suit myenum;
    private java.util.List<kafka.avro.Child> myArray;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.avro.CarModel2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.make)) {
        this.make = data().deepCopy(fields()[0].schema(), other.make);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.myenum)) {
        this.myenum = data().deepCopy(fields()[1].schema(), other.myenum);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.myArray)) {
        this.myArray = data().deepCopy(fields()[2].schema(), other.myArray);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing CarModel2 instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.avro.CarModel2 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.make)) {
        this.make = data().deepCopy(fields()[0].schema(), other.make);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.myenum)) {
        this.myenum = data().deepCopy(fields()[1].schema(), other.myenum);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.myArray)) {
        this.myArray = data().deepCopy(fields()[2].schema(), other.myArray);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'make' field.
      * @return The value.
      */
    public java.lang.CharSequence getMake() {
      return make;
    }


    /**
      * Sets the value of the 'make' field.
      * @param value The value of 'make'.
      * @return This builder.
      */
    public kafka.avro.CarModel2.Builder setMake(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.make = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'make' field has been set.
      * @return True if the 'make' field has been set, false otherwise.
      */
    public boolean hasMake() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'make' field.
      * @return This builder.
      */
    public kafka.avro.CarModel2.Builder clearMake() {
      make = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'myenum' field.
      * @return The value.
      */
    public kafka.avro.Suit getMyenum() {
      return myenum;
    }


    /**
      * Sets the value of the 'myenum' field.
      * @param value The value of 'myenum'.
      * @return This builder.
      */
    public kafka.avro.CarModel2.Builder setMyenum(kafka.avro.Suit value) {
      validate(fields()[1], value);
      this.myenum = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'myenum' field has been set.
      * @return True if the 'myenum' field has been set, false otherwise.
      */
    public boolean hasMyenum() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'myenum' field.
      * @return This builder.
      */
    public kafka.avro.CarModel2.Builder clearMyenum() {
      myenum = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'myArray' field.
      * @return The value.
      */
    public java.util.List<kafka.avro.Child> getMyArray() {
      return myArray;
    }


    /**
      * Sets the value of the 'myArray' field.
      * @param value The value of 'myArray'.
      * @return This builder.
      */
    public kafka.avro.CarModel2.Builder setMyArray(java.util.List<kafka.avro.Child> value) {
      validate(fields()[2], value);
      this.myArray = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'myArray' field has been set.
      * @return True if the 'myArray' field has been set, false otherwise.
      */
    public boolean hasMyArray() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'myArray' field.
      * @return This builder.
      */
    public kafka.avro.CarModel2.Builder clearMyArray() {
      myArray = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CarModel2 build() {
      try {
        CarModel2 record = new CarModel2();
        record.make = fieldSetFlags()[0] ? this.make : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.myenum = fieldSetFlags()[1] ? this.myenum : (kafka.avro.Suit) defaultValue(fields()[1]);
        record.myArray = fieldSetFlags()[2] ? this.myArray : (java.util.List<kafka.avro.Child>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CarModel2>
    WRITER$ = (org.apache.avro.io.DatumWriter<CarModel2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CarModel2>
    READER$ = (org.apache.avro.io.DatumReader<CarModel2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.make);

    if (this.myenum == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.myenum.ordinal());
    }

    long size0 = this.myArray.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (kafka.avro.Child e0: this.myArray) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.make = in.readString(this.make instanceof Utf8 ? (Utf8)this.make : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.myenum = null;
      } else {
        this.myenum = kafka.avro.Suit.values()[in.readEnum()];
      }

      long size0 = in.readArrayStart();
      java.util.List<kafka.avro.Child> a0 = this.myArray;
      if (a0 == null) {
        a0 = new SpecificData.Array<kafka.avro.Child>((int)size0, SCHEMA$.getField("myArray").schema());
        this.myArray = a0;
      } else a0.clear();
      SpecificData.Array<kafka.avro.Child> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<kafka.avro.Child>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          kafka.avro.Child e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new kafka.avro.Child();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.make = in.readString(this.make instanceof Utf8 ? (Utf8)this.make : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.myenum = null;
          } else {
            this.myenum = kafka.avro.Suit.values()[in.readEnum()];
          }
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<kafka.avro.Child> a0 = this.myArray;
          if (a0 == null) {
            a0 = new SpecificData.Array<kafka.avro.Child>((int)size0, SCHEMA$.getField("myArray").schema());
            this.myArray = a0;
          } else a0.clear();
          SpecificData.Array<kafka.avro.Child> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<kafka.avro.Child>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              kafka.avro.Child e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new kafka.avro.Child();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










